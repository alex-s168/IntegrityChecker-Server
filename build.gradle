plugins {
    id "java"
    id "me.tagavari.nmsremap" version "1.0.0"
}

group = "me.alex_s168"
version = "0.1"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT"

    compileOnly "org.spigotmc:spigot:1.20.1-R0.1-SNAPSHOT:remapped-mojang"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

def buildTools = new File("BuildTools.jar")

def buildToolsURL = "https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"

tasks.register("getBuildTools") {
    doLast {
        if (!buildTools.exists()) {
            new URL(buildToolsURL).withInputStream{ i -> buildTools.withOutputStream{ it << i }}
        }
    }
}

tasks.register("cleanSpigot") {
    shouldRunAfter("clean")
    doLast {
        delete buildTools
        delete "BuildTools-out"
        delete "BuildData"
        delete "CraftBukkit"
        delete "Spigot"
        delete "Bukkit"
        delete "work"
        delete "run"
    }
}

tasks.register("buildSpigot") {
    dependsOn "getBuildTools"
    doFirst {
        if (file("BuildTools-out").exists()) {
            System.err.println("Already built Spigot, skipping. If this is a mistake, run the cleanSpigot task.")
            return
        }
        // run buildtools
        def cmd = "java -jar " + buildTools + " --rev 1.20.1 --disable-java-check -o BuildTools-out/ --remapped"
        def proc = cmd.execute()
        proc.getInputStream().transferTo System.out
        proc.waitFor()
        delete "work"
        if (proc.exitValue() != 0) {
            proc.getErrorStream().transferTo System.err
            System.err.println("BuildTools failed with exit code " + proc.exitValue())
            System.err.println("You might need to run the cleanSpigot task.")
            throw new GradleException("BuildTools failed with exit code " + proc.exitValue())
        }
    }
}

def runDir = file("run")
def serverJar = file("BuildTools-out/spigot-1.20.1.jar")

tasks.register("prepareRunServer") {
    dependsOn "remap"
    doLast {
        if (!file("BuildTools-out/spigot-1.20.1.jar").exists()) {
            throw new GradleException("Spigot jar not found. Run the buildSpigot task first.")
        }
        runDir.mkdir()
        copy {
            from serverJar
            into runDir
        }
        def eula = new File(runDir , "eula.txt")
        eula.createNewFile()
        eula.write("eula=true\n")
        def pluginDir = new File(runDir, "plugins")
        pluginDir.mkdir()
        copy {
            from "build/libs"
            into pluginDir
        }
    }
}

tasks.register("runServer") {
    dependsOn "prepareRunServer"
    doLast {
        def res = exec {
            commandLine 'java', "-jar", serverJar.absolutePath, "-nogui"
            standardOutput = System.out
            errorOutput = System.err
            workingDir = runDir
        }
        res.assertNormalExitValue()
    }
}

compileJava.dependsOn(buildSpigot)